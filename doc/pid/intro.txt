======================================
EMBEDDED CPU - FPGA-based RISC microprocessor
------------------------------------------------------------
Modern FPGA-based electronics equipment, like function generators, oscilloscopes, and spectrum analysers, use FPGAs to implement their compute intensive logic. These FPGAs are often accompanied with a small, low-cost, microprocessor to supervise and provide interfaces to external peritherals.

The aim of this project is to implement this side-microprocessor into the FPGA to save on BOM costs, PCB space, and power costs, which contribute to higher development and product costs. While savings can be made by the lack of side microprocessor, the product may need a larger FPGA to accommodate the embedded microprocessor. The project will produce a small, soft-core, CPU design and compiler.


======================================
Project Deliverable/Goals
------------------------------------------------------------
The outcome of the project will be to design a small, portable, FPGA-based, CPU core that electronic Product Designers can choose as an alternative to a physical side-microprocessor to embed into their product.

This embedded microprocessor will provide most of the functions of the side-microprocessor, including:
- C-like programming,
- 16-bit RISC instruction Set,
- Interrupts and Threads (software based context switching),
- GPIO,
- PWMs,
- Timers,
- Peripheral interfaces (I2C, RS232),
but excluding:
- ADCs and DACs (as most FPGAs do not have internal ADCs/DACs)

Stretch goals:
- LLVM backend for C programming
- Wishbone interface for easier modularity
- Multi-core design (with Wishbone)
- Single-step debugging interface (with JTAG?)
- Configurable build (bus widths, embedded/external RAM)
- User/Admin mode - similar to x86/ARM which provide privileged instructions


======================================
Project Timeline
------------------------------------------------------------
The project development stages will be as follows:
1) Design of Register set, widths, and buses (1 week)
2) Pipeline and control design (1-2 weeks)
3) Design of the Instruction Set Architecture (ISA) (1-2 weeks)
4) Implementation of Register set, Decoder, and ALUs with a limited ISA in Vivado (1-3 weeks)
5) Simulation/testing of the limited implementation (throughout lifecycle)
6) Implement on real hardware (The Arty Artix-7 FPGA development kit) (1-2 weeks)
7) Real hardware tests (GPIO, PWMs, Timers) (1-2 weeks)


======================================
Resource Requirements
------------------------------------------------------------
Software (Total £0.00):
- Xilinx Vivado Software Suite (£0.00 - owned)
  Coding, Synthesis, Simulation, Test, and Implementation

Hardware (Total £0.00 / ~£93.00):
- Arty Artix-7 FPGA Development Kit ~£93.00
  For final implementation on real hardware
- Fallback Spartan-6 XC6SLX9 FPGA Development Kit (£0.00 - owned)



======================================
Learning Outcomes
------------------------------------------------------------
- Knowledge of internal CPU workings (ISA, pipelines, control, layout, optimisations)
- Low-level C programming
- Working with Embedded Systems
- FPGA development with Verilog programming
  (Synthesis, Timing-contraints, Space-constraints, Implementation)




